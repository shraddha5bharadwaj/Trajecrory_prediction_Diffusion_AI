{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"L4","mount_file_id":"117abl3ufWbfJYhkfv9Q2YWUfh91tb-96","authorship_tag":"ABX9TyN89FUb1tjaG85JWVhXGOWg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6b5Ip3Wzc3AZ"},"outputs":[],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n"]},{"cell_type":"code","source":["!pip install torch torchvision matplotlib tqdm\n"],"metadata":{"id":"alD9F6o3kiTA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","data = pd. read_csv(\"/content/drive/MyDrive/Neuro/combined_output.csv\")"],"metadata":{"id":"rSUX9ne-dbT8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"v9sr37Zu9fUj","executionInfo":{"status":"ok","timestamp":1744046562265,"user_tz":240,"elapsed":52,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"80b3a621-0836-46b4-ab3d-86665cf2186c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   index      pos x      pos y       ori  major axis len  minor axis len  \\\n","0      0  25.049020  50.578431  1.444188       19.381449        6.904603   \n","1      1  25.049020  50.578431  1.444188       19.381449        6.904603   \n","2      2  25.077670  50.601942  1.447305       19.303972        6.987740   \n","3      3  25.179245  50.500000  1.430134       19.369139        7.188067   \n","4      4  25.142857  50.561905  1.439746       19.268549        7.130880   \n","\n","   wing l x  wing l y  wing r x  wing r y  ...  fg area  img contrast  \\\n","0      21.0      66.0      24.0      66.0  ...    232.0          35.0   \n","1      21.0      66.0      24.0      66.0  ...    235.0          32.0   \n","2      21.0      66.0      24.0      66.0  ...    232.0          37.0   \n","3      21.0      66.0      24.0      66.0  ...    231.0          37.0   \n","4      21.0      66.0      24.0      66.0  ...    231.0          37.0   \n","\n","   min fg dist  wing l ang  wing r ang  wing l len  wing r len  frame  fly  \\\n","0    16.124516    0.130152    0.058690   15.944257   15.457206      0    0   \n","1    15.652476    0.130152    0.058690   15.944257   15.457206      1    0   \n","2    16.124516    0.135384    0.053618   15.928829   15.435724      2    0   \n","3    15.652476    0.122704    0.064728   16.053538   15.544794      3    0   \n","4    16.124516    0.131126    0.057157   15.984306   15.480339      4    0   \n","\n","   folder_index  \n","0             0  \n","1             0  \n","2             0  \n","3             0  \n","4             0  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-48fcc154-fd23-4b74-a1b3-53b66409478c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>pos x</th>\n","      <th>pos y</th>\n","      <th>ori</th>\n","      <th>major axis len</th>\n","      <th>minor axis len</th>\n","      <th>wing l x</th>\n","      <th>wing l y</th>\n","      <th>wing r x</th>\n","      <th>wing r y</th>\n","      <th>...</th>\n","      <th>fg area</th>\n","      <th>img contrast</th>\n","      <th>min fg dist</th>\n","      <th>wing l ang</th>\n","      <th>wing r ang</th>\n","      <th>wing l len</th>\n","      <th>wing r len</th>\n","      <th>frame</th>\n","      <th>fly</th>\n","      <th>folder_index</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>25.049020</td>\n","      <td>50.578431</td>\n","      <td>1.444188</td>\n","      <td>19.381449</td>\n","      <td>6.904603</td>\n","      <td>21.0</td>\n","      <td>66.0</td>\n","      <td>24.0</td>\n","      <td>66.0</td>\n","      <td>...</td>\n","      <td>232.0</td>\n","      <td>35.0</td>\n","      <td>16.124516</td>\n","      <td>0.130152</td>\n","      <td>0.058690</td>\n","      <td>15.944257</td>\n","      <td>15.457206</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>25.049020</td>\n","      <td>50.578431</td>\n","      <td>1.444188</td>\n","      <td>19.381449</td>\n","      <td>6.904603</td>\n","      <td>21.0</td>\n","      <td>66.0</td>\n","      <td>24.0</td>\n","      <td>66.0</td>\n","      <td>...</td>\n","      <td>235.0</td>\n","      <td>32.0</td>\n","      <td>15.652476</td>\n","      <td>0.130152</td>\n","      <td>0.058690</td>\n","      <td>15.944257</td>\n","      <td>15.457206</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>25.077670</td>\n","      <td>50.601942</td>\n","      <td>1.447305</td>\n","      <td>19.303972</td>\n","      <td>6.987740</td>\n","      <td>21.0</td>\n","      <td>66.0</td>\n","      <td>24.0</td>\n","      <td>66.0</td>\n","      <td>...</td>\n","      <td>232.0</td>\n","      <td>37.0</td>\n","      <td>16.124516</td>\n","      <td>0.135384</td>\n","      <td>0.053618</td>\n","      <td>15.928829</td>\n","      <td>15.435724</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>25.179245</td>\n","      <td>50.500000</td>\n","      <td>1.430134</td>\n","      <td>19.369139</td>\n","      <td>7.188067</td>\n","      <td>21.0</td>\n","      <td>66.0</td>\n","      <td>24.0</td>\n","      <td>66.0</td>\n","      <td>...</td>\n","      <td>231.0</td>\n","      <td>37.0</td>\n","      <td>15.652476</td>\n","      <td>0.122704</td>\n","      <td>0.064728</td>\n","      <td>16.053538</td>\n","      <td>15.544794</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>25.142857</td>\n","      <td>50.561905</td>\n","      <td>1.439746</td>\n","      <td>19.268549</td>\n","      <td>7.130880</td>\n","      <td>21.0</td>\n","      <td>66.0</td>\n","      <td>24.0</td>\n","      <td>66.0</td>\n","      <td>...</td>\n","      <td>231.0</td>\n","      <td>37.0</td>\n","      <td>16.124516</td>\n","      <td>0.131126</td>\n","      <td>0.057157</td>\n","      <td>15.984306</td>\n","      <td>15.480339</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48fcc154-fd23-4b74-a1b3-53b66409478c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-48fcc154-fd23-4b74-a1b3-53b66409478c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-48fcc154-fd23-4b74-a1b3-53b66409478c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-06a23ac1-9ab8-40fd-8db7-f8fb788e7cee\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-06a23ac1-9ab8-40fd-8db7-f8fb788e7cee')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-06a23ac1-9ab8-40fd-8db7-f8fb788e7cee button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["threshold = 2\n","train_df = data[data['folder_index'] <= threshold]\n","test_df = data[data['folder_index'] > threshold]"],"metadata":{"id":"dXhtSYPwg1EZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(next(iter(train_loader)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rDnizRnahkc8","executionInfo":{"status":"ok","timestamp":1743983843413,"user_tz":240,"elapsed":662,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"ecbb059c-b375-4763-a263-8cb5b3eb4cb5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# import torch\n","# from torch.utils.data import Dataset\n","\n","# class FlySingleStepDataset(Dataset):\n","#     def __init__(self, df):\n","#         self.samples = []\n","\n","#         # Group data by individual fly/trajectory (folder_index)\n","#         grouped = df.groupby('folder_index')\n","\n","#         for _, group in grouped:\n","#             group = group.sort_values('frame').reset_index(drop=True)\n","#             pos = group[['pos x', 'pos y']].values\n","\n","#             # Normalize the position using per-group mean and std\n","#             mean = pos.mean(axis=0)\n","#             std = pos.std(axis=0) + 1e-8  # avoid division by zero\n","#             norm_pos = (pos - mean) / std\n","\n","#             # Make input â†’ target pairs\n","#             for i in range(len(norm_pos) - 1):\n","#                 self.samples.append((norm_pos[i], norm_pos[i + 1]))\n","\n","#     def __len__(self):\n","#         return len(self.samples)\n","\n","#     def __getitem__(self, idx):\n","#         current_pos, next_pos = self.samples[idx]\n","#         return torch.tensor(current_pos, dtype=torch.float32), torch.tensor(next_pos, dtype=torch.float32)\n"],"metadata":{"id":"IBnuoL83iTo9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch.utils.data import Dataset\n","import numpy as np\n","\n","class FlySingleStepDataset(Dataset):\n","    def __init__(self, df):\n","        self.samples = []\n","\n","        # Group data by individual fly/trajectory (folder_index)\n","        grouped = df.groupby('folder_index')\n","\n","        for _, group in grouped:\n","            group = group.sort_values('frame').reset_index(drop=True)\n","            pos = group[['pos x', 'pos y']].values\n","\n","            # Replace NaNs with 0.0\n","            pos = np.nan_to_num(pos, nan=0.0)\n","\n","            # Make input â†’ target pairs\n","            for i in range(len(pos) - 1):\n","                self.samples.append((pos[i], pos[i + 1]))\n","\n","    def __len__(self):\n","        return len(self.samples)\n","\n","    def __getitem__(self, idx):\n","        current_pos, next_pos = self.samples[idx]\n","        return torch.tensor(current_pos, dtype=torch.float32), torch.tensor(next_pos, dtype=torch.float32)\n"],"metadata":{"id":"PAdNijG9N29g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torch.utils.data import DataLoader, random_split\n","\n","def create_minimal_dataloaders(df, folder_threshold, batch_size=32, val_split=0.2):\n","    # Split by folder index\n","    train_df = df[df['folder_index'] <= folder_threshold]\n","    test_df = df[df['folder_index'] > folder_threshold]\n","\n","    # Create full training dataset\n","    full_train_dataset = FlySingleStepDataset(train_df)\n","    test_dataset = FlySingleStepDataset(test_df)\n","\n","    # Compute split sizes\n","    val_size = int(len(full_train_dataset) * val_split)\n","    train_size = len(full_train_dataset) - val_size\n","\n","    # Split into train and val\n","    train_dataset, val_dataset = random_split(full_train_dataset, [train_size, val_size])\n","\n","    # Create loaders\n","    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n","    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n","    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n","\n","    return train_loader, val_loader, test_loader, full_train_dataset\n","\n"],"metadata":{"id":"G5dGfAPviu5C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load your CSV\n","# df = pd.read_csv('fly_trajectory.csv')\n","\n","# Create dataloaders\n","# train_loader, test_loader = create_minimal_dataloaders(data, folder_threshold=5, batch_size=64)\n","train_loader, val_loader, test_loader, train_dataset = create_minimal_dataloaders(data, folder_threshold=2, batch_size=64)\n","\n","# Peek at a batch\n","for inputs, targets in train_loader:\n","    print(\"Input shape:\", inputs.shape)   # [batch_size, 2]\n","    print(\"Target shape:\", targets.shape) # [batch_size, 2]\n","    break\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UvwcQxAZi9oO","executionInfo":{"status":"ok","timestamp":1744049696445,"user_tz":240,"elapsed":2418,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"92c09027-ced9-40f6-c7ba-fa648eee2f6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input shape: torch.Size([64, 2])\n","Target shape: torch.Size([64, 2])\n"]}]},{"cell_type":"code","source":["next(iter(test_loader))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VBKxkuS1NmAr","executionInfo":{"status":"ok","timestamp":1744052407478,"user_tz":240,"elapsed":13,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"2363527f-035c-4179-dafa-d84dd6f5d248"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[tensor([[264.4171, 252.3029],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [262.9302, 254.2442],\n","         [261.0114, 256.6023],\n","         [  0.0000,   0.0000],\n","         [259.8436, 258.6034],\n","         [  0.0000,   0.0000],\n","         [257.9766, 260.2339],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [256.2667, 262.1000],\n","         [255.6271, 263.0396],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [255.2742, 264.4140],\n","         [  0.0000,   0.0000],\n","         [254.7184, 266.1264],\n","         [254.1058, 267.5027],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [253.5622, 268.7081],\n","         [252.6364, 270.4034],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [251.9837, 271.7283],\n","         [251.4011, 272.8517],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [251.2097, 273.3333],\n","         [250.3422, 274.4546],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [249.7268, 275.0929],\n","         [249.5238, 275.5609],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [249.3258, 276.1629],\n","         [248.8840, 276.5304],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.8152, 276.7826],\n","         [248.6223, 276.9575],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.5737, 276.9579],\n","         [248.6243, 276.6878],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.6158, 276.6263],\n","         [248.6649, 276.5969],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.6968, 276.6170],\n","         [248.7000, 276.3579],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.6597, 276.3717],\n","         [248.7460, 276.2646],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.7263, 276.2000],\n","         [248.7005, 276.1337],\n","         [  0.0000,   0.0000]]),\n"," tensor([[  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [262.9302, 254.2442],\n","         [261.0114, 256.6023],\n","         [  0.0000,   0.0000],\n","         [259.8436, 258.6034],\n","         [  0.0000,   0.0000],\n","         [257.9766, 260.2339],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [256.2667, 262.1000],\n","         [255.6271, 263.0396],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [255.2742, 264.4140],\n","         [  0.0000,   0.0000],\n","         [254.7184, 266.1264],\n","         [254.1058, 267.5027],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [253.5622, 268.7081],\n","         [252.6364, 270.4034],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [251.9837, 271.7283],\n","         [251.4011, 272.8517],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [251.2097, 273.3333],\n","         [250.3422, 274.4546],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [249.7268, 275.0929],\n","         [249.5238, 275.5609],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [249.3258, 276.1629],\n","         [248.8840, 276.5304],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.8152, 276.7826],\n","         [248.6223, 276.9575],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.5737, 276.9579],\n","         [248.6243, 276.6878],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.6158, 276.6263],\n","         [248.6649, 276.5969],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.6968, 276.6170],\n","         [248.7000, 276.3579],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.6597, 276.3717],\n","         [248.7460, 276.2646],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000],\n","         [248.7263, 276.2000],\n","         [248.7005, 276.1337],\n","         [  0.0000,   0.0000],\n","         [  0.0000,   0.0000]])]"]},"metadata":{},"execution_count":68}]},{"cell_type":"markdown","source":["FORWARD ADDING NOISE"],"metadata":{"id":"icTObV70kerH"}},{"cell_type":"markdown","source":[],"metadata":{"id":"uLjGYHVo_8o7"}},{"cell_type":"code","source":[],"metadata":{"id":"EuetV8HLOkG3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","\n","def get_beta_schedule(T, beta_start=1e-4, beta_end=0.02):\n","    return torch.linspace(beta_start, beta_end, T)\n","\n","T = 100\n","betas = get_beta_schedule(T)\n","alphas = 1. - betas\n","alphas_cumprod = torch.cumprod(alphas, dim=0)\n","sqrt_alphas_cumprod = torch.sqrt(alphas_cumprod)\n","sqrt_one_minus_alphas_cumprod = torch.sqrt(1. - alphas_cumprod)\n"],"metadata":{"id":"2N2sWr3x_7jX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","\n","def get_beta_schedule(T, beta_start=1e-4, beta_end=0.02):\n","    return torch.linspace(beta_start, beta_end, T)\n","\n","T = 100\n","betas = get_beta_schedule(T)\n","# Move the noise schedule tensors to the device\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","betas = betas.to(device)\n","alphas = 1. - betas\n","alphas_cumprod = torch.cumprod(alphas, dim=0)\n","sqrt_alphas_cumprod = torch.sqrt(alphas_cumprod)\n","sqrt_one_minus_alphas_cumprod = torch.sqrt(1. - alphas_cumprod)\n","\n","\n","alphas_cumprod_prev = torch.cat([torch.tensor([1.], device=alphas.device), alphas_cumprod[:-1]])\n","\n","sqrt_recip_alphas = torch.sqrt(1. / alphas)\n","sqrt_alphas_cumprod = torch.sqrt(alphas_cumprod)\n","sqrt_one_minus_alphas_cumprod = torch.sqrt(1. - alphas_cumprod)\n","\n","posterior_variance = betas * (1. - alphas_cumprod_prev) / (1. - alphas_cumprod)\n","\n","def q_sample(x_start, t, noise=None):\n","    \"\"\"\n","    Adds Gaussian noise to x_start (i.e., next_pos) using the forward diffusion process.\n","\n","    Args:\n","        x_start: (B, 2) - original next position\n","        t: (B,) - timesteps\n","        noise: (B, 2) - optional, if you want to pass pre-sampled noise\n","\n","    Returns:\n","        x_t: (B, 2) - noised version of x_start\n","        noise: (B, 2) - noise used (sampled from N(0, I) if not provided)\n","    \"\"\"\n","    if noise is None:\n","        noise = torch.randn_like(x_start)  # Sample Îµ ~ N(0, I)\n","\n","    # Fetch the correct scale factors for each sample in the batch\n","    sqrt_alpha_cumprod_t = sqrt_alphas_cumprod[t].to(x_start.device).unsqueeze(1) # This was causing the error\n","    sqrt_one_minus_alpha_cumprod_t = sqrt_one_minus_alphas_cumprod[t].to(x_start.device).unsqueeze(1)\n","\n","    # Diffusion equation: x_t = âˆšÎ±Ì…_t * x_0 + âˆš(1 - Î±Ì…_t) * Îµ\n","    x_t = sqrt_alpha_cumprod_t * x_start + sqrt_one_minus_alpha_cumprod_t * noise\n","\n","    return x_t, noise"],"metadata":{"id":"bo0_M-_vBWKg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","x0 = torch.tensor([[0.5, 0.0]])  # Some sample normalized position\n","# ts = torch.tensor([0, 200, 500, 800, 999]) # Original line causing error\n","ts = torch.tensor([0, 20, 50, 80, 99])  # Updated to be within the range of T\n","noised = []\n","\n","for t_val in ts:\n","    x_t, _ = q_sample(x0, torch.tensor([t_val]))\n","    noised.append(x_t[0].numpy())\n","\n","noised = np.array(noised)\n","plt.plot(noised[:, 0], noised[:, 1], 'o-')\n","plt.title(\"Trajectory of noisy samples over timesteps\")\n","plt.xlabel(\"x\")\n","plt.ylabel(\"y\")\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"kmvfhE7KIaqU","executionInfo":{"status":"ok","timestamp":1744049706624,"user_tz":240,"elapsed":170,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"8989ffbf-7593-4cad-d330-74b763f3984f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def p_sample(model, x_t, current_pos, t):\n","    \"\"\"\n","    model: your trained denoising network\n","    x_t: current noisy input\n","    current_pos: known position (condition)\n","    t: current timestep\n","\n","    returns: x_{t-1}, a less noisy sample\n","    \"\"\"\n","\n","    # Predict the noise Îµ\n","    pred_noise = model(x_t, current_pos, t)\n","\n","    # Estimate x_0 from predicted noise\n","    x0_pred = (x_t - sqrt_one_minus_alphas_cumprod[t].unsqueeze(1) * pred_noise) / sqrt_alphas_cumprod[t].unsqueeze(1)\n","\n","    # Compute mean of posterior q(x_{t-1} | x_t, x0)\n","    coef1 = betas[t] * torch.sqrt(alphas_cumprod_prev[t]) / (1. - alphas_cumprod[t])\n","    coef2 = (1. - alphas_cumprod_prev[t]) * torch.sqrt(alphas[t]) / (1. - alphas_cumprod[t])\n","    posterior_mean = coef1.unsqueeze(1) * x0_pred + coef2.unsqueeze(1) * x_t\n","\n","    # Compute variance\n","    posterior_var = posterior_variance[t].unsqueeze(1)\n","\n","    # Sample x_{t-1}\n","    if t[0] == 0:\n","        return posterior_mean  # last step: no noise\n","    noise = torch.randn_like(x_t)\n","    return posterior_mean + torch.sqrt(posterior_var) * noise\n"],"metadata":{"id":"KDh8hRMNIBWh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import math\n","\n","class SinusoidalTimeEmbedding(nn.Module):\n","    def __init__(self, dim):\n","        super().__init__()\n","        self.dim = dim\n","\n","    def forward(self, t):\n","        \"\"\"\n","        t: (B,) integer timesteps\n","        returns: (B, dim)\n","        \"\"\"\n","        half_dim = self.dim // 2\n","        emb = math.log(10000) / (half_dim - 1)\n","        emb = torch.exp(torch.arange(half_dim, dtype=torch.float32) * -emb)\n","        emb = t.unsqueeze(1).float() * emb.unsqueeze(0)\n","        return torch.cat([torch.sin(emb), torch.cos(emb)], dim=1)\n"],"metadata":{"id":"ZgdI--RyBYx8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import math\n","\n","class SinusoidalTimeEmbedding(nn.Module):\n","    def __init__(self, dim, device): # Add device argument\n","        super().__init__()\n","        self.dim = dim\n","        self.device = device # Store the device\n","\n","    def forward(self, t):\n","        \"\"\"\n","        t: (B,) integer timesteps\n","        returns: (B, dim)\n","        \"\"\"\n","        half_dim = self.dim // 2\n","        emb = math.log(10000) / (half_dim - 1)\n","        emb = torch.exp(torch.arange(half_dim, dtype=torch.float32, device=self.device) * -emb) # Create emb on the device\n","        emb = t.unsqueeze(1).float() * emb.unsqueeze(0)\n","        return torch.cat([torch.sin(emb), torch.cos(emb)], dim=1)\n","\n","class DenoiseMLP(nn.Module):\n","    def __init__(self, time_embed_dim=16, hidden_dim=64, device='cuda'): # Add device argument\n","        super().__init__()\n","        self.time_embed = SinusoidalTimeEmbedding(time_embed_dim, device) # Pass device to SinusoidalTimeEmbedding\n","\n","        self.model = nn.Sequential(\n","            nn.Linear(2 + 2 + time_embed_dim, hidden_dim),  # [x_t, current_pos, t_emb] a a*coeff\n","            nn.ReLU(),\n","            nn.Linear(hidden_dim, hidden_dim),\n","            nn.ReLU(),\n","            nn.Linear(hidden_dim, 2)  # Predict noise (same shape as input)\n","        )\n","\n","    def forward(self, x_t, current_pos, t):\n","        \"\"\"\n","        x_t: (B, 2) - noisy next_pos\n","        current_pos: (B, 2)\n","        t: (B,) - timestep\n","        \"\"\"\n","        t_emb = self.time_embed(t)  # (B, time_embed_dim)\n","        x = torch.cat([x_t, current_pos, t_emb], dim=1)\n","        return self.model(x)  # (B, 2)"],"metadata":{"id":"nIBoD0tXBz0n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Notes - use sequences, history , p(next loc|history) each seq(image) ,  UNEt\n"],"metadata":{"id":"n35ShCbYzKp6"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","def train_denoising_model(\n","    model, train_loader, val_loader, num_timesteps, device,\n","    epochs=100, lr=1e-3, patience=5\n","):\n","    optimizer = optim.Adam(model.parameters(), lr=lr)\n","    loss_fn = nn.MSELoss()\n","\n","    best_val_loss = float('inf')\n","    patience_counter = 0\n","    model.to(device)\n","\n","    for epoch in range(epochs):\n","        model.train()\n","        total_train_loss = 0\n","        for current_pos, next_pos in train_loader:\n","            current_pos = current_pos.to(device)\n","            next_pos = next_pos.to(device)\n","\n","\n","            B = current_pos.shape[0]\n","            t = torch.randint(0, num_timesteps, (B,), device=device)\n","\n","            # forward\n","            x_t, noise = q_sample(next_pos, t)\n","\n","            # predict\n","            pred_noise = model(x_t, current_pos, t)\n","\n","            loss = loss_fn(pred_noise, noise)\n","            optimizer.zero_grad()\n","            loss.backward()\n","            optimizer.step()\n","\n","            total_train_loss += loss.item() * B\n","\n","        avg_train_loss = total_train_loss / len(train_loader.dataset)\n","\n","        # Validation\n","        model.eval()\n","        total_val_loss = 0\n","        with torch.no_grad():\n","            for current_pos, next_pos in val_loader:\n","                current_pos = current_pos.to(device)\n","                next_pos = next_pos.to(device)\n","                B = current_pos.shape[0]\n","                t = torch.randint(0, num_timesteps, (B,), device=device)\n","                x_t, noise = q_sample(next_pos, t)\n","                pred_noise = model(x_t, current_pos, t)\n","                val_loss = loss_fn(pred_noise, noise)\n","                total_val_loss += val_loss.item() * B\n","\n","        avg_val_loss = total_val_loss / len(val_loader.dataset)\n","\n","        print(f\"[Epoch {epoch+1}] Train Loss: {avg_train_loss:.4f} | Val Loss: {avg_val_loss:.4f}\")\n","\n","        # Early stopping\n","        if avg_val_loss < best_val_loss:\n","            best_val_loss = avg_val_loss\n","            patience_counter = 0\n","            torch.save(model.state_dict(), \"best_denoise_model.pt\")  # Save best model\n","        else:\n","            patience_counter += 1\n","            if patience_counter >= patience:\n","                print(\"Early stopping triggered.\")\n","                break\n","\n","    print(\"Training finished.\")\n"],"metadata":{"id":"zlKpsoBwB4i8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = DenoiseMLP()\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","train_denoising_model(model, train_loader, val_loader, num_timesteps=100, device=device)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jovHE8QMCNvK","outputId":"8a2ec635-13bc-4c11-bd6e-3d4487cbf6e2","executionInfo":{"status":"ok","timestamp":1744049994841,"user_tz":240,"elapsed":272327,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[Epoch 1] Train Loss: 1.0271 | Val Loss: 0.9910\n","[Epoch 2] Train Loss: 0.9947 | Val Loss: 0.9958\n","[Epoch 3] Train Loss: 0.9934 | Val Loss: 0.9926\n","[Epoch 4] Train Loss: 0.9924 | Val Loss: 0.9911\n","[Epoch 5] Train Loss: 0.9937 | Val Loss: 0.9928\n","[Epoch 6] Train Loss: 0.9936 | Val Loss: 0.9937\n","Early stopping triggered.\n","Training finished.\n"]}]},{"cell_type":"markdown","source":["TESTT"],"metadata":{"id":"hQZRaxLITYoj"}},{"cell_type":"code","source":["model = DenoiseMLP()\n","model.load_state_dict(torch.load(\"best_denoise_model.pt\"))\n","model.eval()\n","model.to(device)\n"],"metadata":{"id":"TbAQKAqzCPLh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744050008850,"user_tz":240,"elapsed":14,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"3e94281b-c494-4890-d68c-fd4d6869b01e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DenoiseMLP(\n","  (time_embed): SinusoidalTimeEmbedding()\n","  (model): Sequential(\n","    (0): Linear(in_features=20, out_features=64, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=64, out_features=64, bias=True)\n","    (3): ReLU()\n","    (4): Linear(in_features=64, out_features=2, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["def predict_next_positions(model, test_loader, num_timesteps, device):\n","    model.eval()\n","    predictions = []\n","    ground_truth = []\n","    inputs = []\n","\n","    with torch.no_grad():\n","        for current_pos, next_pos in test_loader:\n","            current_pos = current_pos.to(device)\n","            B = current_pos.shape[0]\n","\n","            # Start from noise\n","            x_t = torch.randn_like(current_pos)\n","\n","            for t in reversed(range(num_timesteps)):\n","                t_batch = torch.full((B,), t, device=device, dtype=torch.long)\n","                pred_noise = model(x_t, current_pos, t_batch)\n","\n","                alpha = alphas[t]\n","                alpha_cumprod = alphas_cumprod[t]\n","                alpha_cumprod_prev = alphas_cumprod[t - 1] if t > 0 else torch.tensor(1.0, device=device)\n","                beta = betas[t]\n","                sqrt_one_minus_alpha_cumprod = torch.sqrt(1 - alpha_cumprod)\n","\n","                x0_pred = (x_t - sqrt_one_minus_alpha_cumprod * pred_noise) / torch.sqrt(alpha_cumprod)\n","\n","                coef1 = beta * torch.sqrt(alpha_cumprod_prev) / (1 - alpha_cumprod)\n","                coef2 = (1 - alpha_cumprod_prev) * torch.sqrt(alpha) / (1 - alpha_cumprod)\n","                posterior_mean = coef1 * x0_pred + coef2 * x_t\n","\n","                if t > 0: # curr,[target x,y -> noise ->\n","                    noise = torch.randn_like(x_t)\n","                    posterior_var = posterior_variance[t]\n","                    x_t = posterior_mean + torch.sqrt(posterior_var) * noise\n","                else:\n","                    x_t = posterior_mean  # final prediction\n","\n","            predictions.append(x_t.cpu())\n","            ground_truth.append(next_pos)\n","            inputs.append(current_pos.cpu())\n","\n","    return torch.cat(inputs), torch.cat(predictions), torch.cat(ground_truth)\n"],"metadata":{"id":"ndhE17aAUWb2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# inputs, preds, targets = predict_next_positions(\n","#     model=model,\n","#     test_loader=test_loader,\n","#     num_timesteps=100,\n","#     device=device\n","# )\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"id":"SbeQn-_NUYgC","executionInfo":{"status":"error","timestamp":1744050989205,"user_tz":240,"elapsed":975742,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"394f0d66-206c-4d4b-fb2d-e9437e553ad5"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-9ff32996c831>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m inputs, preds, targets = predict_next_positions(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mtest_loader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_loader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mnum_timesteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-53-74ddd80d0f1e>\u001b[0m in \u001b[0;36mpredict_next_positions\u001b[0;34m(model, test_loader, num_timesteps, device)\u001b[0m\n\u001b[1;32m     21\u001b[0m                 \u001b[0malpha_cumprod_prev\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malphas_cumprod\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mt\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                 \u001b[0mbeta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbetas\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m                 \u001b[0msqrt_one_minus_alpha_cumprod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0malpha_cumprod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m                 \u001b[0mx0_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx_t\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0msqrt_one_minus_alpha_cumprod\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mpred_noise\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha_cumprod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     37\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhas_torch_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mhandle_torch_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrapped\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36m__rsub__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m   1071\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_handle_torch_function_and_wrap_type_error_to_not_implemented\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1072\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__rsub__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1073\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_C\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_VariableFunctions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrsub\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1074\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1075\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_handle_torch_function_and_wrap_type_error_to_not_implemented\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":[],"metadata":{"id":"rJgRRw1diOmf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"jLRroKUaY31Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Show a few predictions vs ground truth\n","for i in range(11,12):\n","    x, y = inputs[i]\n","    px, py = preds[i]\n","    tx, ty = targets[i]\n","\n","    print(f\"Current:     ({x:.2f}, {y:.2f})\")\n","    print(f\"Predicted:   ({px:.2f}, {py:.2f})\")\n","    print(f\"Ground truth:({tx:.2f}, {ty:.2f})\\n\")\n","\n","    plt.plot([x, tx], [y, ty], 'go-', label='Ground Truth' if i == 0 else \"\")\n","    plt.plot([x, px], [y, py], 'ro--', label='Predicted' if i == 0 else \"\")\n","\n","plt.legend()\n","plt.title(\"Predicted vs Ground Truth Next Positions\")\n","plt.xlabel(\"X\")\n","plt.ylabel(\"Y\")\n","plt.grid(True)\n","plt.axis(\"equal\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"i1xV7AQ4UcQA","executionInfo":{"status":"ok","timestamp":1744051577168,"user_tz":240,"elapsed":151,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"51c0f08f-8db0-4fb2-a999-31bcdcedaf7c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Current:     (256.27, 262.10)\n","Predicted:   (-0.41, -0.99)\n","Ground truth:(489.83, 136.70)\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-66-f84b4d25f33b>:16: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n","  plt.legend()\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"e25H7BCqg5y_"}},{"cell_type":"code","source":["model.eval()\n","predictions = []\n","ground_truth = []\n","inputs = []\n","\n","sample_count = 0\n","max_samples = 100\n","\n","with torch.no_grad():\n","    for current_pos, next_pos in test_loader:\n","        current_pos = current_pos.to(device)\n","        B = current_pos.shape[0]\n","\n","        if sample_count >= max_samples:\n","            break\n","\n","        # Truncate if batch would push us over the limit\n","        if sample_count + B > max_samples:\n","            cutoff = max_samples - sample_count\n","            current_pos = current_pos[:cutoff]\n","            next_pos = next_pos[:cutoff]\n","            B = cutoff\n","\n","        # Start from noise\n","        x_t = torch.randn_like(current_pos)\n","\n","        for t in reversed(range(100)):\n","            t_batch = torch.full((B,), t, device=device, dtype=torch.long)\n","            pred_noise = model(x_t, current_pos, t_batch)\n","\n","            alpha = alphas[t]\n","            alpha_cumprod = alphas_cumprod[t]\n","            alpha_cumprod_prev = alphas_cumprod[t - 1] if t > 0 else torch.tensor(1.0, device=device)\n","            beta = betas[t]\n","            sqrt_one_minus_alpha_cumprod = torch.sqrt(1 - alpha_cumprod)\n","\n","            x0_pred = (x_t - sqrt_one_minus_alpha_cumprod * pred_noise) / torch.sqrt(alpha_cumprod)\n","\n","            coef1 = beta * torch.sqrt(alpha_cumprod_prev) / (1 - alpha_cumprod)\n","            coef2 = (1 - alpha_cumprod_prev) * torch.sqrt(alpha) / (1 - alpha_cumprod)\n","            posterior_mean = coef1 * x0_pred + coef2 * x_t\n","\n","            if t > 0:\n","                noise = torch.randn_like(x_t)\n","                posterior_var = posterior_variance[t]\n","                x_t = posterior_mean + torch.sqrt(posterior_var) * noise\n","            else:\n","                x_t = posterior_mean  # final prediction\n","\n","        predictions.append(x_t.cpu())\n","        ground_truth.append(next_pos)\n","        inputs.append(current_pos.cpu())\n","        sample_count += B\n","\n","# Concatenate results\n","inputs = torch.cat(inputs)\n","preds = torch.cat(predictions)\n","ground_truth = torch.cat(ground_truth)\n"],"metadata":{"id":"pCFtNLQeg6WR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"4fep7dSHTZm-"}},{"cell_type":"code","source":[],"metadata":{"id":"b4IIbqDkTaOk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["EXTRAAAA\n"],"metadata":{"id":"bkhS-PCiJNLA"}},{"cell_type":"markdown","source":[],"metadata":{"id":"U5pCEdkYJNIr"}},{"cell_type":"markdown","source":[],"metadata":{"id":"c2vAGAPmJNGG"}},{"cell_type":"code","source":["def forward_diffusion_sample(x_start, t, noise=None):\n","    \"\"\"\n","    Forward process: adds noise to the clean data x_start at timestep t.\n","\n","    Args:\n","        x_start: (B, 2) - clean next_pos\n","        t: (B,) - timestep\n","        noise: optional Gaussian noise; sampled internally if None\n","\n","    Returns:\n","        x_t: (B, 2) - noised version of x_start\n","        noise: (B, 2) - noise added\n","    \"\"\"\n","    # print(\"start\",x_start)\n","    if noise is None:\n","        noise = torch.randn_like(x_start)\n","\n","    sqrt_alpha_cumprod_t = sqrt_alphas_cumprod[t].to(x_start.device).unsqueeze(1)\n","    sqrt_one_minus_alpha_cumprod_t = sqrt_one_minus_alphas_cumprod[t].to(x_start.device).unsqueeze(1)\n","\n","    x_t = sqrt_alpha_cumprod_t * x_start + sqrt_one_minus_alpha_cumprod_t * noise\n","    return x_t, noise\n"],"metadata":{"id":"4Efe5JJUJNYZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def reverse_diffusion(model, current_pos, num_steps=1000):\n","    \"\"\"\n","    Generate next_pos by denoising from x_T ~ N(0, I)\n","\n","    Args:\n","        model: trained denoising model\n","        current_pos: (1, 2) - normalized current position (conditioning input)\n","        num_steps: number of timesteps to denoise through\n","\n","    Returns:\n","        pred_next_pos: (1, 2) - predicted next_pos (normalized)\n","    \"\"\"\n","    x_t = torch.randn_like(current_pos)  # Start from noise\n","\n","    for t in reversed(range(num_steps)):\n","        t_batch = torch.full((1,), t, dtype=torch.long, device=current_pos.device)\n","\n","        # Predict noise with model\n","        pred_noise = model(x_t, current_pos, t_batch)\n","\n","        # Estimate x0\n","        x0_pred = (x_t - sqrt_one_minus_alphas_cumprod[t].to(x_t.device) * pred_noise) / sqrt_alphas_cumprod[t].to(x_t.device)\n","\n","        # Compute mean of posterior q(x_{t-1} | x_t, x0)\n","        coef1 = betas[t] * torch.sqrt(alphas_cumprod_prev[t]) / (1. - alphas_cumprod[t])\n","        coef2 = (1. - alphas_cumprod_prev[t]) * torch.sqrt(alphas[t]) / (1. - alphas_cumprod[t])\n","        coef1 = coef1.to(x_t.device).unsqueeze(0)\n","        coef2 = coef2.to(x_t.device).unsqueeze(0)\n","\n","        posterior_mean = coef1 * x0_pred + coef2 * x_t\n","        posterior_var = posterior_variance[t].to(x_t.device).unsqueeze(0)\n","\n","        if t > 0:\n","            noise = torch.randn_like(x_t)\n","            x_t = posterior_mean + torch.sqrt(posterior_var) * noise\n","        else:\n","            x_t = posterior_mean  # final denoised result\n","\n","    return x_t  # normalized next_pos\n"],"metadata":{"id":"n0eK3deGJNvx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from tqdm import tqdm\n","\n","def train_denoising_model(\n","    model, train_loader, val_loader, num_timesteps, device,\n","    epochs=100, lr=1e-3, patience=10\n","):\n","    optimizer = optim.Adam(model.parameters(), lr=lr)\n","    loss_fn = nn.MSELoss()\n","\n","    best_val_loss = float('inf')\n","    patience_counter = 0\n","    model.to(device)\n","\n","    for epoch in range(epochs):\n","        model.train()\n","        total_train_loss = 0\n","\n","        for current_pos, next_pos in tqdm(train_loader, desc=f\"Epoch {epoch+1}\"):\n","            current_pos = current_pos.to(device)\n","            next_pos = next_pos.to(device)\n","            # print(current_pos,next_pos,\"hjbf\")\n","            # break\n","\n","            B = current_pos.shape[0]\n","            t = torch.randint(0, num_timesteps, (B,), device=device)\n","\n","            # Forward diffusion (add Gaussian noise)\n","            x_t, noise = forward_diffusion_sample(next_pos, t)\n","\n","\n","            # Predict noise\n","            pred_noise = model(x_t, current_pos, t)\n","\n","            # --- NaN checks ---\n","            if torch.isnan(noise).any():\n","                print(\" NaN detected in noise\")\n","                print(\"Noise:\", noise)\n","                break\n","            if torch.isnan(x_t).any():\n","                print(\" NaN detected in x_t\")\n","                print(\"x_t:\", x_t)\n","                break\n","            if torch.isnan(pred_noise).any():\n","                print(\" NaN detected in pred_noise\")\n","                print(\"Predicted noise:\", pred_noise)\n","                break\n","\n","            # Loss computation\n","            loss = loss_fn(pred_noise, noise)\n","\n","            if torch.isnan(loss):\n","                print(\" NaN detected in loss\")\n","                print(\"x_t:\", x_t)\n","                print(\"t:\", t)\n","                print(\"current_pos:\", current_pos)\n","                break\n","\n","            optimizer.zero_grad()\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n","            optimizer.step()\n","\n","            total_train_loss += loss.item() * B\n","\n","        avg_train_loss = total_train_loss / len(train_loader.dataset)\n","\n","        # --- Validation ---\n","        model.eval()\n","        total_val_loss = 0\n","        with torch.no_grad():\n","            for current_pos, next_pos in val_loader:\n","                current_pos = current_pos.to(device)\n","                next_pos = next_pos.to(device)\n","                B = current_pos.shape[0]\n","                t = torch.randint(0, num_timesteps, (B,), device=device)\n","                x_t, noise = forward_diffusion_sample(next_pos, t)\n","                pred_noise = model(x_t, current_pos, t)\n","                val_loss = loss_fn(pred_noise, noise)\n","                total_val_loss += val_loss.item() * B\n","\n","        avg_val_loss = total_val_loss / len(val_loader.dataset)\n","\n","        print(f\"â†’ Epoch {epoch+1} | Train Loss: {avg_train_loss:.6f} | Val Loss: {avg_val_loss:.6f}\")\n","\n","        # --- Early stopping ---\n","        if avg_val_loss < best_val_loss:\n","            best_val_loss = avg_val_loss\n","            patience_counter = 0\n","            torch.save(model.state_dict(), \"best_denoise_model.pt\")\n","        else:\n","            patience_counter += 1\n","            if patience_counter >= patience:\n","                print(\"ðŸ›‘ Early stopping triggered.\")\n","                break\n","\n","    print(\"âœ… Training complete.\")\n"],"metadata":{"id":"SQry0f_RJPKr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assuming you have these already loaded/prepared\n","# train_loader, val_loader = create_minimal_dataloaders(...)\n","# forward_diffusion_sample is defined\n","# sqrt_alphas_cumprod, sqrt_one_minus_alphas_cumprod, etc., are initialized\n","\n","num_timesteps = 100  # Make sure this matches your noise schedule\n","\n","train_denoising_model(\n","    model=model,\n","    train_loader=train_loader,\n","    val_loader=val_loader,\n","    num_timesteps=num_timesteps,\n","    device=device,\n","    epochs=100,\n","    lr=1e-3,\n","    patience=10\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JDVnhJnxJeZl","executionInfo":{"status":"ok","timestamp":1744046072225,"user_tz":240,"elapsed":163016,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"b4d927f6-f715-4817-87a4-c1fd785be063"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Epoch 1:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[105.8166, 311.5148],\n","        [252.7436,  75.1385],\n","        [ 36.8457, 367.9630],\n","        [359.7766, 243.1624],\n","        [347.0348, 328.4129],\n","        [201.5075, 272.1960],\n","        [269.6875, 265.4427],\n","        [490.8010, 136.7811],\n","        [294.5575, 306.6897],\n","        [ 50.4906,  66.3113],\n","        [255.0192, 202.7436],\n","        [382.8156, 306.6760],\n","        [290.7475, 236.1061],\n","        [368.3474, 298.0316],\n","        [379.8014, 295.6738],\n","        [536.5525, 318.3647],\n","        [135.9832,  82.7430],\n","        [384.1053, 360.3301],\n","        [297.3768, 322.6715],\n","        [376.5252, 288.7980],\n","        [128.8910, 113.6635],\n","        [286.7746, 171.5318],\n","        [362.9091, 331.7273],\n","        [387.3452, 164.2893],\n","        [410.2944, 245.2233],\n","        [303.4952, 254.3333],\n","        [494.9704,  67.9310],\n","        [ 91.4492, 154.6578],\n","        [527.6733, 312.7136],\n","        [189.8324, 370.9595],\n","        [480.0433, 207.8702],\n","        [267.9259, 345.0265],\n","        [419.8592, 383.8786],\n","        [375.8333, 176.0494],\n","        [356.7512, 133.5463],\n","        [443.3559, 186.5876],\n","        [234.1163, 232.9395],\n","        [326.5225, 283.3764],\n","        [211.2066, 158.2441],\n","        [268.7914, 255.1925],\n","        [321.2462, 302.7231],\n","        [380.5965, 133.2398],\n","        [433.2292, 224.9896],\n","        [303.4844, 346.3490],\n","        [ 32.0698, 187.0543],\n","        [244.2434, 283.7090],\n","        [400.3246, 177.2984],\n","        [348.0000, 327.5765],\n","        [222.6290, 315.4355],\n","        [285.5907, 191.4197],\n","        [116.8011, 198.0829],\n","        [260.6118, 456.4824],\n","        [483.5459, 179.4643],\n","        [241.3388, 383.4262],\n","        [490.5454, 136.3369],\n","        [543.6755, 118.8511],\n","        [476.6902, 419.2535],\n","        [257.3729, 147.4350],\n","        [463.1905, 189.1217],\n","        [382.2327, 268.0629],\n","        [127.0785, 209.0000],\n","        [135.3172, 423.5699],\n","        [ 69.1173,  42.0867],\n","        [ 39.8393,  52.6786]]) tensor([[105.7811, 311.5444],\n","        [492.0396,  70.3614],\n","        [ 37.2407, 368.3395],\n","        [327.3699, 238.3642],\n","        [315.4561, 292.8596],\n","        [207.3500, 231.6600],\n","        [319.1337, 247.4070],\n","        [169.7796, 277.4301],\n","        [277.7487, 260.2359],\n","        [ 50.6168,  66.6355],\n","        [254.9874, 202.7233],\n","        [417.9455, 319.7576],\n","        [335.0269, 209.1544],\n","        [331.4700, 311.0700],\n","        [238.9300, 221.9350],\n","        [536.5943, 318.4514],\n","        [135.9891,  82.6995],\n","        [383.9952, 360.3476],\n","        [376.7850, 349.3800],\n","        [237.3676, 220.7402],\n","        [128.8863, 113.7441],\n","        [286.7473, 171.2527],\n","        [372.3000, 271.6000],\n","        [233.4039, 241.5911],\n","        [408.6569, 245.5980],\n","        [290.2203, 211.0734],\n","        [494.8861,  68.0347],\n","        [ 91.4462, 154.5753],\n","        [396.1813, 247.4404],\n","        [191.3590, 326.4974],\n","        [480.1292, 207.7560],\n","        [282.7471, 289.4706],\n","        [342.2674, 265.7326],\n","        [349.3333, 213.3118],\n","        [371.7778, 414.7672],\n","        [463.7969, 158.7344],\n","        [234.1080, 233.0000],\n","        [380.8214, 287.6786],\n","        [211.1163, 156.5674],\n","        [268.6277, 255.2553],\n","        [321.1096, 302.1164],\n","        [380.4802, 134.4915],\n","        [224.4410, 142.3179],\n","        [237.3687, 231.8030],\n","        [ 31.8385, 186.6461],\n","        [244.1406, 283.7188],\n","        [341.6131, 152.5357],\n","        [334.6905, 278.8095],\n","        [422.2871, 299.5742],\n","        [285.6064, 191.3351],\n","        [266.0197, 373.3448],\n","        [260.2914, 456.2914],\n","        [483.6062, 179.4301],\n","        [255.9838, 339.0162],\n","        [169.8057, 277.7314],\n","        [117.9163,  66.5911],\n","        [343.1895, 331.7105],\n","        [256.3513, 288.3676],\n","        [463.3492, 189.0582],\n","        [255.8865, 289.0540],\n","        [103.5980, 175.8543],\n","        [134.0622, 381.5072],\n","        [ 68.4251,  41.9952],\n","        [ 85.4737,  24.6930]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 1 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 2:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[490.2620, 244.6898],\n","        [252.4400, 325.4000],\n","        [337.6467, 284.8802],\n","        [490.0102, 236.2500],\n","        [318.3971, 291.9167],\n","        [250.2206,  91.3186],\n","        [161.5344, 274.9365],\n","        [413.6562, 298.2396],\n","        [359.0333, 167.9500],\n","        [344.5934, 271.9011],\n","        [ 71.4041, 115.7565],\n","        [ 44.8364,  34.9636],\n","        [231.5026, 233.0576],\n","        [132.8267, 291.8960],\n","        [279.6042, 181.2188],\n","        [371.7514, 291.1271],\n","        [386.9775, 471.5730],\n","        [365.5388, 312.3886],\n","        [180.1739, 225.2228],\n","        [177.9837,  45.8859],\n","        [207.5879, 221.0905],\n","        [423.6721, 351.4044],\n","        [373.0439, 310.9506],\n","        [373.2896,  72.5246],\n","        [ 85.8319,  55.6460],\n","        [337.1786, 324.9184],\n","        [ 73.9307,  50.4752],\n","        [274.1316, 305.7210],\n","        [173.9430, 228.8860],\n","        [335.7071, 368.2929],\n","        [254.7737, 177.7579],\n","        [366.5846, 135.0769],\n","        [376.3495, 349.7957],\n","        [138.9545, 165.1010],\n","        [ 24.0857,  69.0667],\n","        [291.5970, 329.0050],\n","        [241.2579, 356.8105],\n","        [ 92.6910, 265.5843],\n","        [557.7912, 464.5549],\n","        [357.3940, 449.4899],\n","        [166.4872,  88.7128],\n","        [ 85.0000,  56.1091],\n","        [171.8519, 127.4021],\n","        [201.2443, 305.1193],\n","        [306.1496, 310.3701],\n","        [418.4780, 327.7418],\n","        [ 47.9519,  68.2692],\n","        [185.5539, 332.0196],\n","        [340.4033, 267.3923],\n","        [117.7634, 101.9355],\n","        [ 47.7500, 221.1562],\n","        [ 75.6379, 101.5172],\n","        [159.7563, 217.5330],\n","        [ 89.6117, 288.0319],\n","        [287.5489, 184.4402],\n","        [274.8177, 158.1879],\n","        [359.3706, 175.6176],\n","        [324.0488, 205.4634],\n","        [275.4891, 282.4131],\n","        [234.3109, 229.8964],\n","        [ 67.1981, 217.3527],\n","        [285.4619, 213.4891],\n","        [ 86.6989, 200.7312],\n","        [288.1538, 331.2115]]) tensor([[490.3036, 244.7278],\n","        [252.4059, 325.2871],\n","        [337.6564, 284.8282],\n","        [339.8976, 260.5602],\n","        [370.9839, 286.9624],\n","        [250.3044,  91.3140],\n","        [161.5579, 275.0526],\n","        [413.7677, 298.3737],\n","        [457.5486,  58.6602],\n","        [344.6172, 271.9314],\n","        [  0.0000,   0.0000],\n","        [ 44.8364,  34.9636],\n","        [190.3990, 237.1088],\n","        [ 96.9617, 321.3661],\n","        [343.2754, 419.7005],\n","        [321.1859, 304.8442],\n","        [388.8571, 473.9286],\n","        [365.4564, 312.3949],\n","        [180.2053, 225.0842],\n","        [320.2030, 396.1881],\n","        [207.6030, 221.0553],\n","        [423.6961, 351.4475],\n","        [407.3374, 319.5522],\n","        [372.9511,  72.0870],\n","        [ 91.2222,  85.6667],\n","        [275.6136, 282.5909],\n","        [111.5862,  88.2845],\n","        [302.6162, 272.2216],\n","        [174.0258, 228.8711],\n","        [335.6766, 368.1940],\n","        [254.7135, 177.7969],\n","        [483.7337,  62.2412],\n","        [297.5750, 322.6200],\n","        [138.9231, 164.9590],\n","        [ 37.0270,  47.5045],\n","        [432.9898, 295.1735],\n","        [408.5000, 261.4514],\n","        [  0.0000,   0.0000],\n","        [557.2865, 464.2865],\n","        [169.3295, 324.0694],\n","        [166.5385,  88.7231],\n","        [102.8558,  86.0385],\n","        [518.2836, 290.6269],\n","        [552.3226,  58.6505],\n","        [306.3701, 310.4961],\n","        [418.3977, 327.7614],\n","        [ 89.5631,  36.0097],\n","        [185.5779, 332.2513],\n","        [340.3636, 267.4118],\n","        [117.9524, 102.0000],\n","        [ 47.6108, 221.3645],\n","        [ 75.7778, 101.5641],\n","        [159.8299, 217.5258],\n","        [330.2291, 275.8939],\n","        [118.1888, 210.2755],\n","        [262.3631, 179.7598],\n","        [381.5409, 198.6289],\n","        [462.2366, 318.0107],\n","        [341.0782, 300.7207],\n","        [268.0343, 231.5147],\n","        [ 67.4476, 217.6143],\n","        [285.6215, 213.3898],\n","        [325.8413, 201.1587],\n","        [210.6544, 357.5393]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 2 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 3:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[156.1450, 331.7650],\n","        [170.6755, 260.7287],\n","        [268.4713, 189.5287],\n","        [221.6854, 464.9888],\n","        [397.1750, 322.9800],\n","        [ 98.5932, 118.8757],\n","        [ 76.7727,  73.5682],\n","        [335.2235, 235.8529],\n","        [363.4082, 282.1479],\n","        [134.6804, 251.4845],\n","        [372.3532,  96.6617],\n","        [197.9521, 298.5319],\n","        [  0.0000,   0.0000],\n","        [111.2250,  86.0917],\n","        [324.7526, 305.5722],\n","        [273.8853, 300.0601],\n","        [554.2158, 353.1105],\n","        [455.0000, 266.7725],\n","        [392.5800, 316.9000],\n","        [114.9182,  65.3727],\n","        [361.6461, 310.1538],\n","        [363.8861, 246.5693],\n","        [292.1290, 206.0516],\n","        [301.3822, 274.8639],\n","        [143.3542, 232.6146],\n","        [237.2857, 158.0571],\n","        [361.6890, 313.4146],\n","        [555.2579,  30.6226],\n","        [248.0429, 338.2857],\n","        [178.5026, 276.1762],\n","        [  0.0000,   0.0000],\n","        [355.4142, 301.5151],\n","        [269.9752, 251.5155],\n","        [147.4479, 250.0521],\n","        [320.1456, 288.0127],\n","        [ 81.0000,  72.0130],\n","        [234.5320, 224.8719],\n","        [447.3077, 327.8846],\n","        [376.7196, 335.0421],\n","        [163.3864, 242.2273],\n","        [262.5000, 262.0862],\n","        [  0.0000,   0.0000],\n","        [224.1642, 412.3333],\n","        [119.3855, 259.4637],\n","        [442.7675, 468.9380],\n","        [250.2174, 339.2391],\n","        [367.6613, 293.8925],\n","        [362.8708, 285.9550],\n","        [352.1694, 250.8689],\n","        [351.8326, 321.1770],\n","        [327.2941, 277.3481],\n","        [357.5815, 221.4239],\n","        [295.4258, 212.5297],\n","        [ 74.5957, 426.1543],\n","        [101.0573, 232.4010],\n","        [ 69.7407,  43.7593],\n","        [364.4516, 275.3495],\n","        [264.9218, 211.6927],\n","        [117.6378, 101.3367],\n","        [ 88.8842, 201.6421],\n","        [244.9151, 390.4667],\n","        [382.9143, 189.1486],\n","        [170.4947, 166.9579],\n","        [229.2379, 460.3981]]) tensor([[472.6425, 435.1865],\n","        [170.6277, 260.7181],\n","        [274.4581, 214.6816],\n","        [221.6966, 464.9326],\n","        [134.5781, 251.5208],\n","        [145.4162, 119.7259],\n","        [ 51.8962,  40.3208],\n","        [335.3546, 235.9186],\n","        [403.4450, 276.5183],\n","        [397.0754, 322.8392],\n","        [232.8564, 223.4974],\n","        [247.2028, 268.2783],\n","        [346.4094, 300.7018],\n","        [ 91.8925,  63.7097],\n","        [324.6939, 305.4592],\n","        [273.9135, 299.9189],\n","        [190.8214, 338.0655],\n","        [454.9893, 267.0214],\n","        [325.4286, 283.7302],\n","        [114.9444,  65.2222],\n","        [361.5771, 310.2139],\n","        [351.7222, 453.2778],\n","        [ 79.5892, 288.7351],\n","        [308.4046, 220.1098],\n","        [142.9797, 232.1066],\n","        [237.2443, 158.1023],\n","        [361.7093, 313.4302],\n","        [  0.0000,   0.0000],\n","        [248.0960, 338.4596],\n","        [163.5556, 229.0167],\n","        [579.6099, 245.1758],\n","        [296.9474,  34.8947],\n","        [301.7198, 255.1648],\n","        [102.6735, 191.9439],\n","        [319.9221, 288.0060],\n","        [ 98.6162,  61.4040],\n","        [284.6596, 321.3564],\n","        [167.9005, 386.0000],\n","        [376.5981, 335.2570],\n","        [163.4425, 242.2356],\n","        [ 51.0412, 208.1649],\n","        [  0.0000,   0.0000],\n","        [114.8750, 389.5119],\n","        [227.8263, 217.0141],\n","        [449.7658, 368.0098],\n","        [ 41.1882, 314.4294],\n","        [327.5469, 308.6250],\n","        [312.1094, 289.8438],\n","        [322.4237, 250.2712],\n","        [338.3851, 276.3103],\n","        [422.0000, 471.0000],\n","        [369.4360, 262.0872],\n","        [396.8342, 142.1244],\n","        [452.8571, 451.5764],\n","        [368.7321, 263.2143],\n","        [ 69.7685,  43.8426],\n","        [471.2057, 319.3493],\n","        [264.9382, 211.6461],\n","        [140.8458, 167.1841],\n","        [325.9308, 201.2021],\n","        [117.2079,  48.1832],\n","        [382.7816, 189.1667],\n","        [171.4017, 177.3504],\n","        [ 47.3182, 224.4242]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 3:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 3 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 4:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[298.6416, 209.4335],\n","        [311.7408, 396.5079],\n","        [244.3386, 320.5503],\n","        [275.5093, 267.0621],\n","        [169.6599, 280.2893],\n","        [234.9319, 171.4555],\n","        [373.1493, 335.5274],\n","        [369.4555, 291.7749],\n","        [228.2892, 212.7990],\n","        [280.7556, 232.0389],\n","        [287.3394, 274.3697],\n","        [280.0435, 211.4402],\n","        [376.6632, 349.4974],\n","        [350.6120, 216.7322],\n","        [472.6276, 435.1633],\n","        [ 66.9256,  33.5950],\n","        [346.9628, 263.8670],\n","        [336.0818, 212.6604],\n","        [ 97.3214, 214.7398],\n","        [269.1050, 242.2486],\n","        [212.3333, 477.2083],\n","        [178.8585, 221.5519],\n","        [489.5288, 230.9424],\n","        [523.9774, 246.3785],\n","        [377.9948, 287.6546],\n","        [133.7202,  83.2280],\n","        [333.5872, 218.8023],\n","        [ 84.8415, 266.4153],\n","        [ 77.5167, 100.3778],\n","        [330.3069, 322.2574],\n","        [470.7720, 119.3472],\n","        [334.1337, 245.7965],\n","        [283.8136, 105.8983],\n","        [253.1353, 335.1787],\n","        [173.1053, 254.0368],\n","        [573.6205,  75.2410],\n","        [204.3838, 325.9243],\n","        [311.0978, 407.8913],\n","        [170.4385, 260.8877],\n","        [  0.0000,   0.0000],\n","        [261.9154, 356.5970],\n","        [290.0781, 340.3385],\n","        [100.7540, 213.0481],\n","        [254.2537, 176.6468],\n","        [319.6554, 334.5367],\n","        [272.3736, 306.1207],\n","        [222.4778, 144.4778],\n","        [432.8916, 295.4877],\n","        [443.3980, 357.9702],\n","        [328.1837, 309.4796],\n","        [376.6158, 343.4972],\n","        [392.7644, 284.9856],\n","        [290.1761, 211.0682],\n","        [517.9951, 118.7044],\n","        [237.2448, 288.4948],\n","        [395.7158, 294.6421],\n","        [311.8011, 250.8840],\n","        [377.1786, 288.2194],\n","        [396.7500, 374.0981],\n","        [188.8474, 233.6053],\n","        [272.3141, 193.1361],\n","        [273.0650, 172.2150],\n","        [242.5668, 198.9198],\n","        [252.2538, 178.4873]]) tensor([[298.7381, 209.5119],\n","        [ 46.9378, 148.4306],\n","        [244.0773, 320.7017],\n","        [119.8934,  48.0305],\n","        [151.4185,  31.7880],\n","        [256.5500, 193.3188],\n","        [373.1472, 335.4771],\n","        [416.9421, 324.7316],\n","        [228.5410, 255.0000],\n","        [287.5255, 272.7143],\n","        [361.1934, 264.0166],\n","        [280.0540, 211.2811],\n","        [297.4200, 322.8750],\n","        [361.5301, 168.9036],\n","        [193.4257, 338.0495],\n","        [107.8091,  97.6545],\n","        [188.6762, 128.4048],\n","        [336.0500, 212.8562],\n","        [ 47.9945, 229.2099],\n","        [269.1278, 242.2722],\n","        [204.1111, 467.4445],\n","        [179.0338, 222.1498],\n","        [521.6722, 208.0444],\n","        [523.7821, 246.6257],\n","        [378.0255, 287.5969],\n","        [153.3857,  41.9333],\n","        [297.9744, 239.1949],\n","        [293.2722, 280.4817],\n","        [ 77.5205,  99.9240],\n","        [329.8278, 251.2556],\n","        [470.7835, 119.4072],\n","        [298.2971, 259.1486],\n","        [283.9669, 105.8177],\n","        [323.2910, 300.1587],\n","        [173.1959, 255.2577],\n","        [364.7330, 197.2775],\n","        [204.3800, 325.8200],\n","        [345.1095, 391.8358],\n","        [170.4378, 260.8378],\n","        [103.2330, 175.0049],\n","        [155.9622, 147.3135],\n","        [268.4815, 315.4709],\n","        [363.4647, 407.3177],\n","        [254.2020, 176.6946],\n","        [298.6971, 276.7260],\n","        [263.7867, 358.8057],\n","        [241.8458, 399.4627],\n","        [381.0341, 361.3864],\n","        [443.3788, 357.9495],\n","        [367.7708, 294.1875],\n","        [349.2067, 254.6425],\n","        [355.0887, 277.6982],\n","        [303.4737, 254.2919],\n","        [574.7050, 117.1300],\n","        [232.6868, 326.3297],\n","        [358.0118, 292.6412],\n","        [356.3906, 229.3490],\n","        [377.1949, 288.1743],\n","        [396.9469, 374.2609],\n","        [238.2878, 145.2488],\n","        [272.1158, 193.1737],\n","        [273.0448, 172.2637],\n","        [243.4134, 198.1564],\n","        [298.0570, 206.4747]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 4:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 4 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 5:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[364.9588, 312.0928],\n","        [ 87.1144, 457.1393],\n","        [119.6737,  93.0316],\n","        [364.2406, 230.3583],\n","        [162.3895, 237.0105],\n","        [318.5706, 293.8644],\n","        [299.1753, 166.0722],\n","        [506.7165, 332.2165],\n","        [363.1451, 196.9896],\n","        [281.9304, 231.3924],\n","        [298.0287, 285.7126],\n","        [251.4133, 209.2092],\n","        [338.9950, 242.7222],\n","        [490.9738, 138.5497],\n","        [ 59.9101,  54.6629],\n","        [381.9153, 252.1111],\n","        [170.1950, 201.8000],\n","        [125.8686, 435.6629],\n","        [489.7222, 136.7828],\n","        [503.0343, 240.6520],\n","        [102.4112,  59.2336],\n","        [298.5424, 283.2500],\n","        [ 75.8349,  51.0550],\n","        [230.6415, 201.5708],\n","        [ 35.0259,  36.5086],\n","        [290.9949, 351.6615],\n","        [349.4107, 239.2560],\n","        [  0.0000,   0.0000],\n","        [126.2709,  43.0936],\n","        [377.1640, 349.4127],\n","        [  0.0000,   0.0000],\n","        [390.1378, 409.7449],\n","        [320.8075, 284.7205],\n","        [110.3532, 398.4826],\n","        [506.5532, 152.1808],\n","        [224.9471,  73.6085],\n","        [164.0872, 224.5692],\n","        [207.1324, 348.9069],\n","        [365.5132, 230.3228],\n","        [115.2708,  98.6042],\n","        [365.3861, 195.3734],\n","        [238.9337, 315.3316],\n","        [367.3936, 303.8883],\n","        [275.7795, 303.8564],\n","        [433.5366, 295.7317],\n","        [229.7713, 301.5319],\n","        [318.6509, 194.6840],\n","        [272.9941, 306.2529],\n","        [257.7879, 252.0667],\n","        [106.6488, 314.1905],\n","        [  0.0000,   0.0000],\n","        [ 80.6566, 195.4444],\n","        [  0.0000,   0.0000],\n","        [350.1875, 125.1250],\n","        [272.3064, 257.1214],\n","        [419.3930, 382.0249],\n","        [274.3128, 205.8923],\n","        [319.5938, 273.6667],\n","        [324.9534, 269.4663],\n","        [210.4314, 453.2402],\n","        [397.2732, 301.2878],\n","        [381.5762, 427.2762],\n","        [287.3873, 291.3295],\n","        [503.0959, 240.6162]]) tensor([[365.0155, 312.0829],\n","        [ 87.2475, 456.2574],\n","        [119.6075,  92.9731],\n","        [364.2064, 230.3862],\n","        [166.5594, 176.3168],\n","        [351.7409, 246.6839],\n","        [399.0529, 300.7196],\n","        [359.8054, 294.9352],\n","        [312.0462, 221.2428],\n","        [286.1322, 192.0402],\n","        [590.7125, 367.2938],\n","        [242.3135, 164.4378],\n","        [140.7297, 167.7514],\n","        [163.8824, 246.3824],\n","        [ 78.6116,  89.7670],\n","        [416.6818, 258.8068],\n","        [209.5860, 221.9785],\n","        [126.0904, 435.6158],\n","        [190.1846, 265.5385],\n","        [416.2527, 271.8297],\n","        [ 80.8152,  69.1739],\n","        [323.6099, 259.2473],\n","        [ 75.8407,  51.3894],\n","        [303.0000, 326.3404],\n","        [ 84.8148,  38.4074],\n","        [290.7778, 351.7020],\n","        [361.4000, 273.3135],\n","        [313.6114, 303.8743],\n","        [126.1805,  42.9561],\n","        [297.2980, 322.6869],\n","        [  0.0000,   0.0000],\n","        [389.4774, 409.5477],\n","        [317.7710, 312.6075],\n","        [143.6410, 425.0718],\n","        [331.9290, 291.4142],\n","        [110.8543, 260.7839],\n","        [164.2158, 224.7211],\n","        [207.3547, 348.8424],\n","        [365.4703, 230.2432],\n","        [147.4973,  32.8432],\n","        [365.3750, 195.6250],\n","        [142.8270, 371.1568],\n","        [367.4409, 303.8710],\n","        [275.8827, 303.7653],\n","        [433.5572, 295.7711],\n","        [208.9613, 252.3370],\n","        [337.9341, 240.5659],\n","        [273.0241, 306.2771],\n","        [257.7397, 252.0000],\n","        [ 62.7487, 202.3417],\n","        [  0.0000,   0.0000],\n","        [164.1594, 186.0387],\n","        [  0.0000,   0.0000],\n","        [357.9845,  65.0206],\n","        [278.3763, 292.4485],\n","        [342.5183, 265.9372],\n","        [280.3433, 150.5970],\n","        [318.7835, 273.6649],\n","        [325.0598, 269.4946],\n","        [210.2837, 453.1250],\n","        [397.2195, 301.2780],\n","        [214.5583, 321.4854],\n","        [287.3296, 291.1761],\n","        [503.0825, 240.5206]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 5:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 5 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 6:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[235.1483, 341.7418],\n","        [590.8301, 255.3349],\n","        [267.5638, 200.4734],\n","        [211.0150, 332.2000],\n","        [288.1337, 289.7384],\n","        [212.9728, 374.3696],\n","        [302.0000, 280.1465],\n","        [466.5668, 249.0428],\n","        [306.6914, 218.0571],\n","        [328.6349, 120.5661],\n","        [233.0660, 223.6041],\n","        [ 42.7658,  96.4504],\n","        [348.0739, 208.8523],\n","        [263.7200, 209.2400],\n","        [396.8806, 374.1692],\n","        [291.5419, 211.5475],\n","        [ 79.2857,  36.5625],\n","        [144.5505, 121.6919],\n","        [140.0101, 166.5381],\n","        [221.7260, 249.4423],\n","        [ 48.9669,  36.3223],\n","        [234.9211, 171.8053],\n","        [281.8421, 296.8421],\n","        [364.7747, 285.1319],\n","        [371.6389, 289.4167],\n","        [413.1946, 144.5892],\n","        [254.4251, 277.7923],\n","        [117.9529, 102.4974],\n","        [323.8244, 355.3658],\n","        [ 85.9279,  61.4234],\n","        [ 42.7400,  86.4000],\n","        [325.1495, 340.6340],\n","        [315.8546, 310.2364],\n","        [176.3990, 274.3471],\n","        [399.4973, 407.4754],\n","        [346.9305, 333.1070],\n","        [228.3981, 289.8057],\n","        [ 94.4242,  66.1465],\n","        [246.7661, 190.1376],\n","        [487.0833, 447.6823],\n","        [ 90.8205, 153.1180],\n","        [152.9659, 340.7386],\n","        [213.1657, 111.7901],\n","        [348.1593, 278.2143],\n","        [ 83.0773, 266.9227],\n","        [186.0812, 332.0609],\n","        [603.5490,  46.7843],\n","        [428.9882,  24.6118],\n","        [185.0682,  95.4773],\n","        [315.4833, 225.9000],\n","        [ 63.8544,  33.3204],\n","        [147.3598, 173.7354],\n","        [297.7711, 322.0149],\n","        [418.3034, 326.7022],\n","        [352.3284,  58.4559],\n","        [496.9362, 418.3511],\n","        [132.5798, 352.5266],\n","        [167.3485, 287.0101],\n","        [ 36.0825, 164.4223],\n","        [268.1857, 365.9667],\n","        [383.4258, 359.9569],\n","        [324.7180, 209.9949],\n","        [171.8256, 143.3179],\n","        [113.6256,  60.6205]]) tensor([[208.3214, 323.8571],\n","        [590.8010, 255.3265],\n","        [195.8378, 418.4108],\n","        [413.9482, 298.6632],\n","        [322.0000, 325.0000],\n","        [190.4029, 353.6834],\n","        [302.0402, 279.9900],\n","        [438.8995, 194.6085],\n","        [252.0049, 178.7108],\n","        [220.4089, 104.7980],\n","        [372.8235,  96.5455],\n","        [ 53.7732,  75.3402],\n","        [348.1500, 208.8778],\n","        [263.6927, 209.0670],\n","        [307.7604, 173.5000],\n","        [291.7119, 211.5480],\n","        [ 49.9508,  47.1066],\n","        [138.3547, 164.8867],\n","        [139.9682, 166.5185],\n","        [388.7306, 306.9378],\n","        [ 48.9669,  36.3223],\n","        [234.9010, 171.8698],\n","        [302.4456, 200.6087],\n","        [365.2353, 285.7808],\n","        [371.6503, 289.3388],\n","        [424.9894, 117.1905],\n","        [256.3373, 203.1868],\n","        [117.9110, 102.4974],\n","        [324.0000, 301.1012],\n","        [125.6531,  52.6531],\n","        [ 49.2783,  36.5130],\n","        [237.9208, 206.5495],\n","        [337.0890, 331.8429],\n","        [176.1744, 274.0256],\n","        [379.3316, 447.7449],\n","        [311.3841, 303.1522],\n","        [228.3709, 289.9249],\n","        [ 94.3655,  66.0914],\n","        [265.9319, 253.3508],\n","        [346.9388, 309.9337],\n","        [531.5380, 387.1930],\n","        [152.8202, 340.8989],\n","        [289.6436, 237.3069],\n","        [387.8932, 288.5437],\n","        [343.0116, 196.5434],\n","        [437.2513, 246.6578],\n","        [603.3660,  46.6209],\n","        [439.5619,  62.2990],\n","        [268.7308, 326.0769],\n","        [315.4674, 225.9456],\n","        [ 64.2788,  71.0192],\n","        [147.4263, 173.7211],\n","        [340.5820, 333.4603],\n","        [387.3060, 273.1257],\n","        [286.3979, 178.0538],\n","        [357.9153, 302.2203],\n","        [132.9511, 352.2772],\n","        [356.2074, 172.3825],\n","        [295.8445, 368.2667],\n","        [297.8595,  92.7459],\n","        [383.4712, 359.9038],\n","        [324.7590, 209.9538],\n","        [425.6940, 322.0710],\n","        [280.4919, 294.8973]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 6:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 6 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 7:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[356.1087, 255.7228],\n","        [379.2359, 346.5487],\n","        [392.3676, 286.9804],\n","        [124.2872, 289.8205],\n","        [279.6131, 300.6250],\n","        [306.0000, 310.6000],\n","        [417.6776, 393.8798],\n","        [329.8177, 264.4479],\n","        [401.0796, 182.5568],\n","        [292.2012, 214.8781],\n","        [ 67.9257, 218.9158],\n","        [  0.0000,   0.0000],\n","        [319.5050, 426.8650],\n","        [338.5278, 119.1204],\n","        [178.0619, 339.2577],\n","        [202.6343, 191.5943],\n","        [120.5502, 295.5024],\n","        [362.0513, 309.3641],\n","        [271.0314, 111.7592],\n","        [ 81.4545, 375.8075],\n","        [167.8579, 386.1218],\n","        [342.0155, 261.7887],\n","        [372.0874, 465.6120],\n","        [325.6444, 390.0111],\n","        [311.3351, 284.0000],\n","        [ 50.3462,  63.1346],\n","        [292.2986, 191.7149],\n","        [ 42.9604,  44.2871],\n","        [301.4192, 250.1465],\n","        [357.2513, 357.7990],\n","        [301.6343, 305.9543],\n","        [343.3883, 419.6505],\n","        [249.6961, 322.7157],\n","        [245.2717, 339.0272],\n","        [330.6256, 311.3692],\n","        [390.1316, 274.5000],\n","        [474.7579, 206.9895],\n","        [  0.0000,   0.0000],\n","        [319.5208,  91.9583],\n","        [311.6649, 370.1780],\n","        [119.8182, 259.4716],\n","        [374.8245, 231.7074],\n","        [308.9133, 278.1735],\n","        [316.7027, 219.9135],\n","        [307.4239, 202.2120],\n","        [314.4477, 312.3140],\n","        [229.7191, 462.5667],\n","        [262.6316, 375.1000],\n","        [357.8647, 193.0765],\n","        [387.5578, 306.1106],\n","        [223.2222, 437.0529],\n","        [469.3583, 401.6738],\n","        [297.9005, 322.3223],\n","        [371.7871, 182.5792],\n","        [358.5492, 301.0777],\n","        [447.4879, 272.1739],\n","        [283.4794, 313.0258],\n","        [376.4189, 289.2094],\n","        [258.6649, 186.4278],\n","        [232.0985, 259.8227],\n","        [273.4802, 261.3614],\n","        [285.0619, 190.2577],\n","        [224.6895, 217.9772],\n","        [257.3679, 269.4767]]) tensor([[150.0808, 426.8333],\n","        [443.0423, 362.3810],\n","        [350.0995, 276.2304],\n","        [  0.0000,   0.0000],\n","        [249.4874, 323.1357],\n","        [306.0000, 310.6090],\n","        [377.4626, 345.6589],\n","        [252.5224, 325.4328],\n","        [400.7735, 182.6354],\n","        [292.9643, 213.8214],\n","        [ 67.9952, 218.9808],\n","        [228.0798, 276.7128],\n","        [319.4200, 426.9650],\n","        [479.8511, 183.6489],\n","        [177.3211, 340.0105],\n","        [223.2464, 236.1015],\n","        [120.4757, 295.4320],\n","        [419.6848, 282.5163],\n","        [271.0316, 111.8316],\n","        [ 81.5105, 376.7210],\n","        [167.8454, 386.0876],\n","        [341.9799, 261.8543],\n","        [371.7849, 465.5323],\n","        [254.2525, 176.6683],\n","        [311.3073, 284.0335],\n","        [ 51.1845,  65.2913],\n","        [292.3518, 191.6528],\n","        [ 84.0089,  34.2566],\n","        [ 51.5816, 267.0663],\n","        [194.8844,  45.2543],\n","        [315.0145, 391.9372],\n","        [343.2913, 419.8058],\n","        [258.2303, 357.5225],\n","        [366.4909, 467.8818],\n","        [330.9337, 311.5816],\n","        [417.4368, 325.2210],\n","        [  0.0000,   0.0000],\n","        [  0.0000,   0.0000],\n","        [319.7234,  91.8989],\n","        [311.9062, 370.1562],\n","        [227.8139, 216.9674],\n","        [374.8367, 231.5204],\n","        [308.9192, 278.2071],\n","        [316.6141, 219.9185],\n","        [282.9485, 297.1598],\n","        [ 47.1822,  73.0981],\n","        [363.0659, 401.5385],\n","        [309.6250, 334.9350],\n","        [379.6364, 169.7525],\n","        [223.0634, 285.4927],\n","        [133.0588, 454.8137],\n","        [319.5767, 229.2011],\n","        [340.5350, 333.4200],\n","        [371.8366, 182.4852],\n","        [455.8979, 392.0459],\n","        [241.6560, 454.2480],\n","        [158.8309, 371.7488],\n","        [376.4332, 289.1658],\n","        [290.3743, 175.5754],\n","        [443.2419, 101.8817],\n","        [273.4514, 261.1602],\n","        [285.0677, 190.2552],\n","        [119.5440, 259.3956],\n","        [257.4000, 269.5179]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 7:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 7 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 8:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[ 51.7231, 267.0410],\n","        [495.2086, 394.8289],\n","        [222.5450, 317.3862],\n","        [146.3810, 372.5397],\n","        [361.7598, 310.3185],\n","        [410.7180, 342.5128],\n","        [346.3579, 272.0796],\n","        [316.8971, 440.1912],\n","        [174.0052, 141.6114],\n","        [392.7789, 317.0653],\n","        [252.0955, 349.6231],\n","        [355.2923, 301.2564],\n","        [238.1354, 239.6406],\n","        [140.1780, 166.9948],\n","        [196.7571, 239.9667],\n","        [268.6195, 192.0439],\n","        [174.7128, 232.2923],\n","        [265.6491, 251.5205],\n","        [359.4536, 302.1186],\n","        [218.6823, 333.4948],\n","        [267.9814, 250.6698],\n","        [348.7391, 269.6631],\n","        [476.6923, 419.1176],\n","        [250.7579, 307.4211],\n","        [ 38.9368, 424.8678],\n","        [129.9645, 164.3452],\n","        [358.2126, 343.9195],\n","        [ 50.7989, 220.3704],\n","        [236.6450, 108.0750],\n","        [248.2374, 335.6566],\n","        [289.4438, 328.9941],\n","        [255.3233, 249.9461],\n","        [ 27.7843,  66.0686],\n","        [326.1329, 187.9653],\n","        [287.6059, 265.6706],\n","        [342.4593, 227.0814],\n","        [136.4588, 331.1176],\n","        [358.0366, 444.3903],\n","        [126.0576, 322.3979],\n","        [285.0545, 186.6606],\n","        [415.1808, 364.5692],\n","        [276.7890, 337.5734],\n","        [134.6250, 251.5000],\n","        [317.7548, 300.4856],\n","        [329.8579, 255.2947],\n","        [ 42.7652,  39.3130],\n","        [ 43.2287, 244.6702],\n","        [ 70.4656, 201.4815],\n","        [189.0561, 128.3364],\n","        [354.1639, 200.5902],\n","        [255.9740, 289.1927],\n","        [289.1958, 232.5079],\n","        [103.8846, 351.6827],\n","        [223.9349, 224.7302],\n","        [267.5538, 347.8872],\n","        [ 65.9273, 102.8818],\n","        [321.9355, 258.6989],\n","        [321.0904, 291.3245],\n","        [225.8151, 471.7877],\n","        [207.9344,  49.3880],\n","        [275.0757, 259.4293],\n","        [254.0806, 433.2986],\n","        [337.8807, 284.9659],\n","        [463.3403, 377.4084]]) tensor([[ 51.6839, 267.0155],\n","        [125.4551, 447.2994],\n","        [222.4740, 317.3802],\n","        [ 60.9023, 174.6837],\n","        [394.6227, 313.2878],\n","        [325.7784, 186.1907],\n","        [313.6909, 297.1091],\n","        [222.4293, 129.9646],\n","        [425.8369, 322.7263],\n","        [325.2746, 283.6632],\n","        [304.5530, 307.1894],\n","        [355.2359, 301.2103],\n","        [152.0000, 181.6278],\n","        [110.6939,  97.8520],\n","        [332.9476, 359.0262],\n","        [307.0819, 279.9708],\n","        [135.7487, 236.2103],\n","        [278.4061, 205.7411],\n","        [359.4175, 302.0515],\n","        [254.4545, 338.8182],\n","        [ 45.8187, 216.9240],\n","        [348.8413, 269.6296],\n","        [476.6591, 419.1727],\n","        [ 99.2042,  76.7330],\n","        [241.5869, 372.2253],\n","        [ 78.4109, 146.0000],\n","        [100.7980, 231.8889],\n","        [265.8317, 236.3317],\n","        [236.5100, 108.0950],\n","        [197.7579, 313.7263],\n","        [433.3490, 294.6094],\n","        [254.8144, 249.6347],\n","        [ 49.2137,  36.3761],\n","        [326.0739, 187.9602],\n","        [287.5941, 265.5529],\n","        [459.0521, 362.7188],\n","        [ 89.4928, 153.2464],\n","        [382.0423, 219.0106],\n","        [402.2717, 310.7283],\n","        [284.8690, 186.6190],\n","        [416.7282, 365.4410],\n","        [276.7752, 337.6881],\n","        [367.5792, 303.8087],\n","        [282.1477, 248.0852],\n","        [299.7461, 215.6269],\n","        [ 89.5238,  35.8857],\n","        [262.7662, 213.1492],\n","        [163.8010, 164.8981],\n","        [189.0433, 128.2933],\n","        [301.8619, 215.0055],\n","        [382.1783, 268.0319],\n","        [289.2526, 232.9742],\n","        [103.8557, 351.5274],\n","        [459.9521, 135.3192],\n","        [249.7473, 389.7143],\n","        [ 65.9554, 102.9286],\n","        [416.4171, 234.5143],\n","        [321.0532, 291.4096],\n","        [283.7286, 324.8593],\n","        [287.7247, 192.1798],\n","        [275.4634, 259.4000],\n","        [252.6526, 432.8169],\n","        [337.8436, 284.9218],\n","        [477.6244, 415.4873]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 8 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 9:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[241.1546, 313.8358],\n","        [365.0929, 112.9180],\n","        [179.9086, 268.4946],\n","        [510.6588, 105.5308],\n","        [154.7598, 337.9461],\n","        [195.9762, 289.3036],\n","        [373.9175, 273.1068],\n","        [398.1457, 296.1256],\n","        [454.0846, 319.4776],\n","        [134.7211, 251.5263],\n","        [251.1202, 277.3510],\n","        [317.8644, 223.3277],\n","        [394.0500, 331.2700],\n","        [323.0843, 284.2640],\n","        [320.7514, 212.4162],\n","        [230.7846, 287.4410],\n","        [345.4745, 293.6224],\n","        [492.7330,  68.9424],\n","        [113.6753, 243.9639],\n","        [134.6378, 251.4898],\n","        [303.7586, 352.4384],\n","        [367.8201, 226.4709],\n","        [433.3935, 295.3518],\n","        [343.3947, 273.8737],\n","        [ 85.0791, 274.3446],\n","        [ 80.5111,  69.3111],\n","        [153.1832, 182.3508],\n","        [136.8307,  86.0529],\n","        [416.4576, 103.1186],\n","        [288.1302, 270.5266],\n","        [ 43.6632, 421.7053],\n","        [  0.0000,   0.0000],\n","        [529.8815, 210.1896],\n","        [270.6442, 207.6626],\n","        [274.3663, 299.6860],\n","        [317.6145, 223.2905],\n","        [307.8942, 309.0476],\n","        [468.7513,  61.9048],\n","        [374.0323, 269.1613],\n","        [238.6390, 315.3951],\n","        [205.1049, 314.8025],\n","        [273.5078, 172.0155],\n","        [294.8039, 180.6716],\n","        [227.8122, 216.8920],\n","        [379.4575, 360.2447],\n","        [256.8011, 238.6963],\n","        [361.4689, 459.5424],\n","        [ 52.7318, 184.0818],\n","        [295.2746, 191.6580],\n","        [308.6167, 394.4445],\n","        [ 43.3281, 244.8021],\n","        [306.4099, 197.3416],\n","        [  0.0000,   0.0000],\n","        [251.6735, 277.0459],\n","        [287.4477, 291.0523],\n","        [323.1397, 238.2290],\n","        [231.9557, 171.0099],\n","        [368.3388, 298.3607],\n","        [ 68.1351,  36.3784],\n","        [249.7970, 323.2921],\n","        [251.2893, 175.2589],\n","        [468.0272, 314.9185],\n","        [167.7957, 386.0538],\n","        [  0.0000,   0.0000]]) tensor([[171.6114, 174.8114],\n","        [365.1359, 112.6848],\n","        [179.9251, 268.4866],\n","        [510.7220, 105.5073],\n","        [539.7355, 189.7460],\n","        [331.4359, 447.6974],\n","        [373.9231, 273.0769],\n","        [398.1634, 296.1931],\n","        [454.2778, 319.5353],\n","        [397.0804, 322.8392],\n","        [251.1442, 277.3846],\n","        [317.9887, 223.4068],\n","        [380.9932, 298.3265],\n","        [406.0900, 417.5850],\n","        [346.4372, 267.6483],\n","        [245.1139, 241.3614],\n","        [496.9465, 416.9037],\n","        [257.5000,  77.6350],\n","        [366.5778, 331.9556],\n","        [367.1058, 303.6984],\n","        [109.3073, 304.2292],\n","        [284.4731, 190.7006],\n","        [433.3565, 295.3842],\n","        [313.2755, 297.9820],\n","        [  0.0000,   0.0000],\n","        [ 80.8587,  69.5000],\n","        [209.6053, 222.1632],\n","        [135.1200, 136.9850],\n","        [416.5444, 102.9167],\n","        [288.0181, 270.6325],\n","        [187.1722, 343.7611],\n","        [  0.0000,   0.0000],\n","        [477.5126, 221.8291],\n","        [254.3719, 177.8995],\n","        [300.7905, 327.8952],\n","        [405.1642, 192.7585],\n","        [307.9583, 309.0156],\n","        [468.7660,  61.8670],\n","        [348.9787, 240.0319],\n","        [142.7360, 371.3596],\n","        [201.8144, 349.5670],\n","        [252.6237, 204.3557],\n","        [294.9135, 180.6154],\n","        [227.8486, 216.8991],\n","        [402.5054, 335.0761],\n","        [256.9211, 238.5211],\n","        [361.5257, 459.4743],\n","        [ 52.7644, 184.1600],\n","        [295.1383, 191.6649],\n","        [333.0879, 370.6154],\n","        [ 43.3263, 244.8000],\n","        [260.9843, 214.8115],\n","        [ 75.8030, 121.1010],\n","        [251.6869, 277.0404],\n","        [294.1237, 354.9409],\n","        [323.2299, 238.2988],\n","        [214.1117, 215.8777],\n","        [331.6869, 311.2980],\n","        [ 69.7273,  63.2273],\n","        [279.6788, 301.0364],\n","        [241.3158, 217.9181],\n","        [ 82.5362, 286.5797],\n","        [446.1304, 325.5024],\n","        [  0.0000,   0.0000]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 9:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 9 | Train Loss: 0.000000 | Val Loss: nan\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 10:   0%|          | 0/32259 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["tensor([[257.9476, 249.9948],\n","        [419.7287, 396.3138],\n","        [394.4866, 293.9358],\n","        [474.5131, 434.6440],\n","        [260.2103, 290.6308],\n","        [139.7720, 312.4456],\n","        [ 46.1534, 216.8011],\n","        [344.7619, 165.2698],\n","        [347.8652, 261.4888],\n","        [358.3976, 196.2229],\n","        [220.8614, 216.4406],\n","        [436.1758, 340.5549],\n","        [328.2865, 228.0169],\n","        [172.1878, 283.7970],\n","        [344.6607, 198.3631],\n","        [554.4150, 374.3750],\n","        [223.5222, 128.6847],\n","        [398.0000, 296.2415],\n","        [288.8333, 279.0357],\n","        [102.8932,  86.0583],\n","        [271.5890, 261.7669],\n","        [198.1639, 194.0437],\n","        [363.8125, 404.6771],\n","        [133.7207, 449.2346],\n","        [172.6818, 227.1919],\n","        [225.0191, 271.1436],\n","        [335.8108, 210.6324],\n","        [378.3632, 287.2935],\n","        [ 79.2807,  35.5263],\n","        [227.6442, 216.8606],\n","        [320.7895, 239.8737],\n","        [267.4481, 251.5974],\n","        [102.7887, 191.7165],\n","        [107.8325, 195.9645],\n","        [360.4521, 363.0798],\n","        [275.5907, 185.5285],\n","        [237.8520, 260.9439],\n","        [383.4660, 289.5236],\n","        [291.3350, 246.3350],\n","        [526.1872, 162.7438],\n","        [574.5000,  71.8608],\n","        [234.6954, 272.8427],\n","        [ 84.9701,  40.7114],\n","        [334.9163,  86.7143],\n","        [380.2549, 266.7190],\n","        [146.3476, 358.6429],\n","        [133.4319,  52.6432],\n","        [383.5957, 269.2075],\n","        [379.7306, 289.6632],\n","        [100.6940, 212.9891],\n","        [185.9453, 332.3383],\n","        [331.9740, 257.3906],\n","        [526.8894, 158.0721],\n","        [427.7925,  34.8936],\n","        [483.2841, 428.1967],\n","        [331.3478, 262.5000],\n","        [376.1938, 292.6750],\n","        [408.6647, 360.3059],\n","        [529.7442, 305.1070],\n","        [320.7778, 212.1296],\n","        [409.8967, 346.3333],\n","        [197.8565, 307.0139],\n","        [248.1192, 356.4197],\n","        [399.8806, 396.0746]]) tensor([[257.6598, 249.7165],\n","        [316.2136, 254.5000],\n","        [394.4102, 293.9590],\n","        [149.1568, 331.9946],\n","        [184.9479, 371.5000],\n","        [139.7150, 312.4715],\n","        [ 46.0782, 216.7598],\n","        [383.6495, 202.7056],\n","        [347.8466, 261.5341],\n","        [358.4882, 196.1941],\n","        [ 93.2211,  33.5075],\n","        [375.2368, 310.9789],\n","        [363.9895, 230.3790],\n","        [205.0335, 226.1005],\n","        [321.7592, 216.1358],\n","        [172.5147, 260.8824],\n","        [313.0390, 419.9122],\n","        [358.6514, 289.2686],\n","        [276.5507, 206.1594],\n","        [102.8932,  86.0583],\n","        [280.4602, 226.1420],\n","        [234.3333, 189.8197],\n","        [364.1284, 403.8289],\n","        [133.2544, 448.3373],\n","        [161.7842, 273.1842],\n","        [209.1344, 230.5054],\n","        [444.7980, 330.8177],\n","        [378.2778, 287.3232],\n","        [ 56.8824,  31.5714],\n","        [120.2772, 259.4022],\n","        [349.7151, 284.9624],\n","        [267.5395, 251.5329],\n","        [151.3618, 225.4925],\n","        [107.8376, 195.8579],\n","        [359.9734, 362.8670],\n","        [275.9663, 185.6910],\n","        [265.4000, 253.2167],\n","        [185.8135, 332.4974],\n","        [261.7624, 208.5028],\n","        [285.9541, 293.6990],\n","        [299.0939, 220.5691],\n","        [249.9310, 232.1667],\n","        [123.0824,  29.9647],\n","        [425.6919, 323.6000],\n","        [255.8710, 288.8548],\n","        [145.8038, 358.4546],\n","        [133.3318,  52.9052],\n","        [376.3300, 328.1450],\n","        [240.6316, 222.2823],\n","        [336.0296, 451.9113],\n","        [185.9067, 332.5129],\n","        [286.6127, 273.3642],\n","        [512.5344, 196.2011],\n","        [318.3694, 310.5714],\n","        [283.2923, 390.9000],\n","        [331.2408, 262.4660],\n","        [347.4167, 339.7206],\n","        [321.8783, 230.9630],\n","        [441.6968, 426.5692],\n","        [320.8239, 212.1195],\n","        [532.7880, 183.5109],\n","        [197.9340, 307.1085],\n","        [257.0565, 311.8644],\n","        [124.7371, 299.3828]]) hjbf\n"," NaN detected in pred_noise\n","Predicted noise: tensor([[nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan],\n","        [nan, nan]], grad_fn=<AddmmBackward0>)\n"]},{"output_type":"stream","name":"stderr","text":["\rEpoch 10:   0%|          | 0/32259 [00:00<?, ?it/s]\n"]},{"output_type":"stream","name":"stdout","text":["â†’ Epoch 10 | Train Loss: 0.000000 | Val Loss: nan\n","ðŸ›‘ Early stopping triggered.\n","âœ… Training complete.\n"]}]},{"cell_type":"code","source":["# print(\"t min:\", T.min().item(), \"t max:\", T.max().item())\n","print(\"sqrt_alphas_cumprod shape:\", sqrt_alphas_cumprod.shape)\n","\n","# Create a sample t to demonstrate indexing\n","sample_t = torch.tensor([50])  # Example value within the valid range\n","\n","print(\"sqrt_alphas_cumprod[sample_t]:\", sqrt_alphas_cumprod[sample_t])\n","print(\"sqrt_one_minus_alphas_cumprod[sample_t]:\", sqrt_one_minus_alphas_cumprod[sample_t])\n","\n","# The following lines were problematic because 'x_start' and 'noise'\n","# were also not defined in this scope. They likely belonged to\n","# the 'forward_diffusion_sample' function.\n","#\n","# To demonstrate their usage, we'll need to create sample data:\n","x_start_example = torch.randn(1, 2)  # Example data for x_start\n","noise_example = torch.randn(1, 2)   # Example data for noise\n","\n","print(\"x_start example:\", x_start_example)\n","print(\"noise example:\", noise_example)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kkaaTaYoKFJq","executionInfo":{"status":"ok","timestamp":1744044749664,"user_tz":240,"elapsed":6,"user":{"displayName":"Shraddha Bharadwaj","userId":"13889782027816332292"}},"outputId":"d7a178b1-f58c-421f-e567-a12834c333e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["sqrt_alphas_cumprod shape: torch.Size([100])\n","sqrt_alphas_cumprod[sample_t]: tensor([0.8771])\n","sqrt_one_minus_alphas_cumprod[sample_t]: tensor([0.4803])\n","x_start example: tensor([[-0.7379, -0.7019]])\n","noise example: tensor([[-0.3290, -0.5035]])\n"]}]},{"cell_type":"code","source":["for current_pos, next_pos in tqdm(train_loader, desc=f\"Epoch {1+1}\"):\n","            current_pos = current_pos.to(device)\n","            next_pos = next_pos.to(device)\n","            print(\"hjbf\",current_pos,next_pos,\"hjbf\")\n","            break"],"metadata":{"id":"FsI27sTiKjVK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ff9FNO-nNSj8"},"execution_count":null,"outputs":[]}]}